#!/usr/bin/env python3
""" 100-lfu_cache module """
from base_caching import BaseCaching


class LFUCache(BaseCaching):
    """
    class LFUCache that inherits from BaseCaching
    and is a caching system
    """
    def __init__(self):
        """Initiliaze """
        super().__init__()
        self.queqe = []
        self.freq_count = {}

    def put(self, key, item):
        """
        assign to the dictionary self.cache_data the
        item value for the key key.
        """
        if len(self.cache_data) >= BaseCaching.MAX_ITEMS:
            least_freq_values = min(freq_count.values())
            keys_minvalue = [key for key, value in freq_count.items() if value == least_freq_values]
            if len(keys_minvalue) > 1:


            oldest_unused_key = self.queqe.pop(0)
            del self.cache_data[oldest_unused_key]
            print("DISCARD: {}".format(oldest_unused_key))
        if key and item:
            self.cache_data[key] = item
            self.queqe.append(key)

    def get(self, key):
        """
        return the value in self.cache_data linked to key.
        """
        if key is None or key not in self.cache_data:
            return None
        self.queqe.remove(key)
        self.queqe.append(key)

        self.update_freq(key)

        return self.cache_data[key]

    def update_freq(self, key):
        """ updates the frequency for a key """
        if key in freq_count:
            self.freq_count[key] += 1
        else:
            self.freq_count[key] = 1


